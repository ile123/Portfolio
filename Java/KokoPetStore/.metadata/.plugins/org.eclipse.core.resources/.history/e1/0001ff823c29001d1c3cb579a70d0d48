package com.petstore.customer;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.petstore.common.entity.Customer;
@Controller
public class CustomerController {

	@Autowired
	private CustomerService service;
	
	@GetMapping("/register")
	public String displayRegistrationForm(Model model) {
		Customer customer = new Customer();
		
		model.addAttribute("pageTitle", "Customer Registration");
		model.addAttribute("customer", customer);
		
		return "customer/register_form";
	}
	
	@PostMapping("/register/new")
	public String saveUser(Customer customer) {
		service.save(customer);
		return "index";
	}
	
	@GetMapping("/customers/edit")
	public String editCustomer(Model model) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		Customer customer = service.findByEmail(auth.getName());
		if(customer == null) {
			return "redirect:/";
		}
		model.addAttribute("customer",customer);
		model.addAttribute("pageTitle","Edit Customer Information (ID:" + customer.getId() + ")");
		return "customer/updateCustomer";
	}
	
	@PutMapping("/customers/update")
	public String updateUser(@ModelAttribute("customer") Customer customer,@RequestParam(value = "id", required = true) Integer Id) {
		var tempCustomer = service.get(Id);
		tempCustomer.setFirstName(customer.getFirstName());
		tempCustomer.setLastName(customer.getLastName());
		tempCustomer.setAddress(customer.getAddress());
		tempCustomer.setCity(customer.getCity());
		tempCustomer.setCountry(customer.getCountry());
		tempCustomer.setProvince(customer.getProvince());
		tempCustomer.setPostalCode(customer.getPostalCode());
		tempCustomer.setPassword(customer.getPassword());
		service.update(tempCustomer);
		return "redirect:/customers";
	}
	
	@PostMapping("/customers/save")
	public String saveCustomer(Customer customer) {
		service.save(customer);
		return "redirect:/";
	}
}
