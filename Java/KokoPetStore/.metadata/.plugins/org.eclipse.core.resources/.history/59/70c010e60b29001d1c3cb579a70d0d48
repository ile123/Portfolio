package com.petstore.admin.category;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.petstore.admin.FileUploadUtil;
import com.petstore.admin.brand.BrandService;
import com.petstore.admin.user.UserService;
import com.petstore.common.entity.Brand;
import com.petstore.common.entity.Category;

@Controller
public class CategoryController {
	
	@Autowired
	private CategoryService service;
	
	
	@GetMapping("/categories")
	public String listFirstPage(Model model) {
		return listByPage(1, model, "name", "asc", null);
	}
	
	@GetMapping("/categories/new")
	public String NewCategory(Model model) {
		var category = new Category();
		model.addAttribute("category",category);
		model.addAttribute("pageTitle","Create New Category");
		return "category/category_form";
	}
	
	@PostMapping("/categories/save")
	public String saveCategory(Category category, @RequestParam("image") MultipartFile multipartFile) throws IOException {
		String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
		if(fileName.isEmpty() || fileName == null) {
			category.setPicture("/PetStoreBackEnd/src/main/resources/images/blank.png");
		}
		else {
			category.setPicture(fileName);
		}
		service.save(category);
		var savedCategory= service.listAllCategories()
				.stream()
				.filter(temp -> category.getName().equals(temp.getName()))
				.findAny().orElse(null);
		String uploadDir = "../brand-images/" + savedCategory.getId();
		FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
		return "redirect:/categories";
	}
	
	@PutMapping("/brands/update")
	//@RequestMapping(value = "/brands/update/{id}", method = RequestMethod.PUT)
	public String updateBrand(@ModelAttribute("brand") Brand brand,@RequestParam(value = "id", required = true) Integer Id) {
		var tempBrand = service.get(Id);
		tempBrand.setName(brand.getName());
		tempBrand.setPicture("/PetStoreBackEnd/src/main/resources/images/blank.png");
		service.update(tempBrand);
		return "redirect:/brands";
	}
	
	@GetMapping("/brands/edit/{id}")
	public String editBrand(@PathVariable(name = "id") Integer id, Model model) {
		var brand = service.get(id);
		if(brand == null) {
			return "redirect:/brands";
		}
		model.addAttribute("brand",brand);
		model.addAttribute("pageTitle","Edit Brand(ID: " + id + ")");
		return "brand/updateBrand";
	}
	
	@DeleteMapping("/brands/delete/{id}")
	public String deleteBrand(@PathVariable(name = "id") Integer id) {
		service.delete(id);
		return "redirect:/brands";
	}
	
	@GetMapping("/brands/page/{pageNum}")
	public String listByPage(@PathVariable(name = "pageNum") int pageNum, Model model,
			@Param("sortField") String sortField, @Param("sortDir") String sortDir,
			@Param("keyword") String keyword) {
		Page<Brand> page = service.listByPage(pageNum, sortField, sortDir, keyword);
		List<Brand> listBrands = page.getContent();
		long startCount = (pageNum -1) * BrandService.BrandsPerPage + 1;
		long endCount = startCount + BrandService.BrandsPerPage - 1;
		if(endCount> page.getTotalElements()) {
			endCount = page.getTotalElements();
		}
		
		String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";
		
		model.addAttribute("startCount", startCount);
		model.addAttribute("endCount", endCount);
		model.addAttribute("currentPage", pageNum);
		model.addAttribute("totalPages", page.getTotalPages());
		model.addAttribute("totalItems",page.getTotalElements());
		model.addAttribute("listBrands", listBrands);
		model.addAttribute("sortField", sortField);
		model.addAttribute("sortDir", sortDir);
		model.addAttribute("reverseSortDir", reverseSortDir);
		model.addAttribute("keyword", keyword);
		return "brand/brands";
	}
}
