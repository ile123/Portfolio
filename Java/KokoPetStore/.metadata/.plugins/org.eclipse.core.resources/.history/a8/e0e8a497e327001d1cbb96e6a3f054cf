package com.petstore.shoppingcart;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.repository.query.Param;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.petstore.common.entity.CartItem;
import com.petstore.common.entity.Customer;
import com.petstore.customer.CustomerService;
@RestController
public class CartItemController {
	@Autowired
	private CartItemService cartService;
	
	@Autowired
	private CustomerService customerService;
	
	@GetMapping("/cart/buy/{productId}")
	public void addProductToCart(@PathVariable(name = "productId") Integer productId) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		Customer customer = customerService.findByEmail(auth.getName());
		cartService.addProduct(productId, customer);
	}
	
	@GetMapping("/purchases")
	public String listFirstPage(Model model) {
		return listByPage(1, model, "name", "asc", null);
	}
	
	@GetMapping("/purchases/page/{pageNum}")
	public String listByPage(@PathVariable(name = "pageNum") int pageNum, Model model,
			@Param("sortField") String sortField, @Param("sortDir") String sortDir,
			@Param("keyword") String keyword) {
		Page<CartItem> page = cartService.listByPage(pageNum, sortField, sortDir, keyword);
		List<CartItem> listPurchases = page.getContent();
		long startCount = (pageNum -1) * cartService.PurchasesPerPage + 1;
		long endCount = startCount + cartService.PurchasesPerPage - 1;
		if(endCount> page.getTotalElements()) {
			endCount = page.getTotalElements();
		}
		
		String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";
		
		model.addAttribute("startCount", startCount);
		model.addAttribute("endCount", endCount);
		model.addAttribute("currentPage", pageNum);
		model.addAttribute("totalPages", page.getTotalPages());
		model.addAttribute("totalItems",page.getTotalElements());
		model.addAttribute("listPurchases", listPurchases);
		model.addAttribute("sortField", sortField);
		model.addAttribute("sortDir", sortDir);
		model.addAttribute("reverseSortDir", reverseSortDir);
		model.addAttribute("keyword", keyword);
		return "purchase/purchases";
	}
	
}