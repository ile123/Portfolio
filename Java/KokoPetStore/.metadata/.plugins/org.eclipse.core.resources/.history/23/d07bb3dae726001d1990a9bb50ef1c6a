package com.petstore.customer;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.petstore.common.entity.Customer;

@Service
public class CustomerService {
	
	private static final Integer CUSTOMERSPERPAGE = 5;
	
	@Autowired
	private CustomerRepository repo;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	public List<Customer> GetAllCustomers(){
		return (List<Customer>) repo.findAll();
	}
	
	public void save(Customer customer) {
		boolean customerExists = (customer.getId() != null);
		if(customerExists) {
			update(customer);
		}
		else {
			if(!isEmailUnique(customer.getEmail())) {
				return;
			}
		}
		repo.save(customer);
	}
	
	public void update(Customer customer) {
		if(!isEmailUnique(customer.getEmail())) {
			return;
		}
		Customer existingCustomer = repo.findById(customer.getId()).get();
		if(customer.getFirstName().isEmpty()) {
			customer.setFirstName(existingCustomer.getFirstName());
		}
		if(customer.getLastName().isEmpty()) {
			customer.setLastName(existingCustomer.getLastName());
		}
		if(customer.getAddress().isEmpty()) {
			customer.setAddress(existingCustomer.getAddress());
		}
		if(customer.getCity().isEmpty()) {
			customer.setCity(existingCustomer.getCity());
		}
		if(customer.getCountry().isEmpty()) {
			customer.setCountry(existingCustomer.getCountry());
		}
		if(customer.getProvince().isEmpty()) {
			customer.setProvince(existingCustomer.getProvince());
		}
		if(customer.getPostalCode().isEmpty()) {
			customer.setPostalCode(existingCustomer.getPostalCode());
		}
		if(customer.getPassword().isEmpty()) {
			customer.setPassword(existingCustomer.getPassword());
			encodePassword(customer);
		}
		else {
			encodePassword(customer);
		}
		repo.save(customer);
	}
	
	public void delete(Integer id) {
		if(repo.findById(id).get() == null) {
			return;
		}
		repo.deleteById(id);
	}
	
	public boolean isEmailUnique(String email) {
		Customer customerByEmail = repo.getCustomerByEmail(email);
		return customerByEmail == null;
	}
	
	public Customer get(Integer id) {
		return repo.findById(id).get();
	}
	
}
