package com.petstore.admin.brand;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.petstore.common.entity.Brand;

@Service
public class BrandService {
	
	@Autowired
	private BrandRepository repo;
	
	public static final int BrandsPerPage = 5;
	
	public List<Brand> GetAllBrands(){
		return (List<Brand>) repo.findAll();
	}
	
	public void save(Brand brand) {
		if(!isBrandNameUnique(brand.getName())) {
			return;
		}
		repo.save(brand);
	}
	//neradi popravi kasnije
	public void update(User user) {
		if(!isEmailUnique(user.getEmail())) {
			return;
		}
		if(user.getId() != null) {
			User existingUser = repo.findById(user.getId()).get();
			if(user.getPassword().isEmpty()) {
				user.setPassword(existingUser.getPassword());
			} else {
				encodePassword(user);
			}
		}
		else {
			encodePassword(user);
		}
		repo.save(user);
	}
	
	public void delete(Integer id) {
		if(repo.findById(id).get() == null) {
			return;
		}
		repo.deleteById(id);
	}
	
	public boolean isBrandNameUnique(String name) {
		Brand brandByName = repo.getBrandByName(name);
		return brandByName == null;
	}
	
	public Brand get(Integer id) {
		return repo.findById(id).get();
	}
	
	public Page<User> listByPage(int pageNum, String sortField, String sortDir, String keyword){
		Sort sort = Sort.by(sortField);
		sort = sortDir.equals("asc") ? sort.ascending() : sort.descending();
		Pageable pageable = PageRequest.of(pageNum - 1, UsersPerPage, sort);
		
		if(keyword != null) {
			return repo.findAll(keyword,pageable);
		}
		
		return repo.findAll(pageable);
	}
}
